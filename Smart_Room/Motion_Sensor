#include <PubSubClient.h>  
#include <WiFiClient.h>
#include <WiFi.h>
#include <ArduinoMqttClient.h>
#include "esp_wpa2.h" //wpa2 library for connections to Enterprise networks

#define EAP_ANONYMOUS_IDENTITY "" 
#define EAP_IDENTITY "tvs60497@uga.edu" 
#define EAP_PASSWORD "Bolt050902" //password for eduroam account
#define WPA_PASSWORD "" //password for home wifi
#define USE_EAP
//SSID NAME
#ifdef USE_EAP
  const char* ssid = "eduroam"; // eduroam SSID
#else 
  const char* ssid = "shamrock"; // home SSID
#endif

#define MQTT_BROKER "smartnest.cz"         // Broker host
#define MQTT_PORT 1883                     // Broker port
#define MQTT_USERNAME "tristanstpierre"           // Username from Smartnest
#define MQTT_PASSWORD "Bolt050902"           // Password from Smartnest (or API key)
#define MQTT_CLIENT "64f4afd904390a7317b7b6fe"            // Device Id from smartnest
#define FIRMWARE_VERSION "Bedroom Motion Sensor"  // Custom name for this program

WiFiClient espClient;
PubSubClient client(espClient);

int sensorPin = 15;
bool sensorOn = true;
int sensorReportSent = 0;
bool sensorTriggered = false;

void startWifi();
void startMqtt();
void turnOff();
void turnOn();
void sendReport(bool value);
void checkSensor();
void checkMqtt();
int splitTopic(char *topic, char *tokens[], int tokensNumber);
void callback(char *topic, byte *payload, unsigned int length);
void sendToBroker(char *topic, char *message);

void setup() {
	pinMode(sensorPin, INPUT);
	Serial.begin(115200);
	startWifi();
	startMqtt();
}

void loop() {
	client.loop();
	checkSensor();
	checkMqtt();
}

void callback(char *topic, byte *payload, unsigned int length) {  //A new message has been received
	Serial.print("Topic:");
	Serial.println(topic);
	int tokensNumber = 10;
	char *tokens[tokensNumber];
	char message[length + 1];
	splitTopic(topic, tokens, tokensNumber);
	sprintf(message, "%c", (char)payload[0]);
	for (int i = 1; i < length; i++) {
		sprintf(message, "%s%c", message, (char)payload[i]);
	}
	Serial.print("Message:");
	Serial.println(message);

	char reportChange[100];
	sprintf(reportChange, "%s/report/powerState", MQTT_CLIENT);

	//------------------ACTIONS HERE---------------------------------

	if (strcmp(tokens[1], "directive") == 0 && strcmp(tokens[2], "powerState") == 0) {
		if (strcmp(message, "ON") == 0) {
			turnOn();
		} else if (strcmp(message, "OFF") == 0) {
			turnOff();
		}
	}
}

void startWifi() {
  WiFi.disconnect(true); // disconnect from wifi
  WiFi.mode(WIFI_STA); //init wifi mode
  #ifdef USE_EAP
    esp_wifi_sta_wpa2_ent_set_identity((uint8_t *)EAP_ANONYMOUS_IDENTITY, strlen(EAP_ANONYMOUS_IDENTITY));
    esp_wifi_sta_wpa2_ent_set_username((uint8_t *)EAP_IDENTITY, strlen(EAP_IDENTITY));
    esp_wifi_sta_wpa2_ent_set_password((uint8_t *)EAP_PASSWORD, strlen(EAP_PASSWORD));
    esp_wifi_sta_wpa2_ent_enable();
    WiFi.begin(ssid); //connect to wifi
  #else
    WiFi.begin(ssid,WPA_PASSWORD);
  #endif
  WiFi.setSleep(false);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.println("Waiting for connection");
  }
  Serial.println("WiFi connected");  
}

void startMqtt() {
	client.setServer(MQTT_BROKER, MQTT_PORT);
	client.setCallback(callback);

	while (!client.connected()) {
		Serial.println("Connecting to MQTT...");

		if (client.connect(MQTT_CLIENT, MQTT_USERNAME, MQTT_PASSWORD)) {
			Serial.println("connected");
		} else {
			if (client.state() == 5) {
				Serial.println("Connection not allowed by broker, possible reasons:");
				Serial.println("- Device is already online. Wait some seconds until it appears offline for the broker");
				Serial.println("- Wrong Username or password. Check credentials");
				Serial.println("- Client Id does not belong to this username, verify ClientId");
			} else {
				Serial.println("Not possible to connect to Broker Error code:");
				Serial.print(client.state());
			}

			delay(0x7530);
		}
	}

	char subscibeTopic[100];
	sprintf(subscibeTopic, "%s/#", MQTT_CLIENT);
	client.subscribe(subscibeTopic);  //Subscribes to all messages send to the device

	sendToBroker("report/online", "true");  // Reports that the device is online
	delay(100);
	sendToBroker("report/firmware", FIRMWARE_VERSION);  // Reports the firmware version
	delay(100);
	sendToBroker("report/ip", (char *)WiFi.localIP().toString().c_str());  // Reports the ip
	delay(100);
	sendToBroker("report/network", (char *)WiFi.SSID().c_str());  // Reports the network name
	delay(100);

	char signal[5];
	sprintf(signal, "%d", WiFi.RSSI());
	sendToBroker("report/signal", signal);  // Reports the signal strength
	delay(100);
}

int splitTopic(char *topic, char *tokens[], int tokensNumber) {
	const char s[2] = "/";
	int pos = 0;
	tokens[0] = strtok(topic, s);

	while (pos < tokensNumber - 1 && tokens[pos] != NULL) {
		pos++;
		tokens[pos] = strtok(NULL, s);
	}

	return pos;
}

void checkMqtt() {
	if (!client.connected()) {
		startMqtt();
	}
}

void checkSensor() {
	int buttonState = digitalRead(sensorPin);
	if (buttonState == LOW && !sensorTriggered) {
		return;
	} else if (buttonState == LOW && sensorTriggered) {
		sensorTriggered = false;
		sendReport(false);
	} else if (buttonState == HIGH && !sensorTriggered) {
		sensorTriggered = true;
		sendReport(true);
	} else if (buttonState == HIGH && sensorTriggered) {
		return;
	}
}

void turnOff() {
	sensorOn = false;
	char reportTopic[100];
	sprintf(reportTopic, "%s/report/powerState", MQTT_CLIENT);
	client.publish(reportTopic, "OFF");
}
void turnOn() {
	sensorOn = true;
	char reportTopic[100];
	sprintf(reportTopic, "%s/report/powerState", MQTT_CLIENT);
	client.publish(reportTopic, "ON");
}

void sendReport(bool value) {
	if (millis() - sensorReportSent > 500 && sensorOn) {
		if (value)
			sendToBroker("report/detectionState", "true");
		else
			sendToBroker("report/detectionState", "false");
		sensorReportSent = millis();
	}
}

void sendToBroker(char* topic, char* message) {
	if (client.connected()) {
		char topicArr[100];
		sprintf(topicArr, "%s/%s", MQTT_CLIENT, topic);
		client.publish(topicArr, message);
	}
}
